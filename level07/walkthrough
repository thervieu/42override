binary basically stores unsigned integers at indexes
we can't store at values that are multiple of 3 (value % 3 == 0)
when storing, value is stored at index * 4

let's try and see where we store eips in the memory using gdb

b read_number
x/x $ebp+0x8
-> 0xffffXXXX is the address of the beginning of the table

when reading (breakpoint on read_number call), saved eip of the first frame is stored at address 0xffffYYYY

which would be index 0xffffYYYY - 0xffffXXXX / 4 = 114

saved eip of the first frame would be stored at the 114th index of the unsigned int table

however 114 = 3 * 48 so we can't simply call this index
-> we'll overflow with (uintmax + 1) / 4 + 114 =  1073741938 // uintmax = 2^32 - 1

We work with the first frame in order to reach a shell when trying to quit the program.

ret2lic attack and we're done

info function system
info function exit
find mapped_start, mapped_end, "/bin/sh"

put those values in decimal and put them at index 1073741938, 115 and 116
